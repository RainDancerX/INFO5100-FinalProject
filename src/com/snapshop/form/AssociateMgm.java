/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.snapshop.form;

import javax.swing.table.DefaultTableModel;
import com.snapshop.util.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author lucas
 */
public class AssociateMgm extends javax.swing.JPanel {

    /**
     * Creates new form associateMgmPanel
     */
    public AssociateMgm() {
        initComponents();

        associateTable.getTableHeader().setFont(new java.awt.Font("Helvetica Neue", java.awt.Font.BOLD, 13));
        loadAssociateData();
    }

    private void loadAssociateData() {
        DefaultTableModel model = (DefaultTableModel) associateTable.getModel();
        model.setRowCount(0); // Clear the table before loading data

        String query = "SELECT AssociateId, username, password FROM associate";

        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {

            // Iterate through the result set and add rows to the table model
            while (resultSet.next()) {
                int associateId = resultSet.getInt("AssociateId");
                String username = resultSet.getString("username");
                String password = resultSet.getString("password");

                model.addRow(new Object[]{associateId, username, password});
            }

        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Failed to load associate data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        associateTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        registerBtn = new javax.swing.JButton();
        customerMgm1 = new javax.swing.JButton();
        customerMgm2 = new javax.swing.JButton();
        customerMgm3 = new javax.swing.JButton();
        deleteBtn1 = new javax.swing.JButton();

        associateTable.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        associateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "username", "password"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        associateTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        associateTable.setRowHeight(30);
        jScrollPane1.setViewportView(associateTable);
        if (associateTable.getColumnModel().getColumnCount() > 0) {
            associateTable.getColumnModel().getColumn(0).setMinWidth(30);
            associateTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            associateTable.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        jPanel1.setOpaque(false);

        registerBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        registerBtn.setForeground(new java.awt.Color(0, 102, 102));
        registerBtn.setText("Register");
        registerBtn.setBorder(null);
        registerBtn.setBorderPainted(false);
        registerBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registerBtn.setFocusPainted(false);
        registerBtn.setFocusable(false);
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });

        customerMgm1.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        customerMgm1.setForeground(new java.awt.Color(0, 102, 102));
        customerMgm1.setText("Update");
        customerMgm1.setBorder(null);
        customerMgm1.setBorderPainted(false);
        customerMgm1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        customerMgm1.setFocusPainted(false);
        customerMgm1.setFocusable(false);

        customerMgm2.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        customerMgm2.setForeground(new java.awt.Color(153, 0, 0));
        customerMgm2.setText("Suspend");
        customerMgm2.setBorder(null);
        customerMgm2.setBorderPainted(false);
        customerMgm2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        customerMgm2.setFocusPainted(false);
        customerMgm2.setFocusable(false);

        customerMgm3.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        customerMgm3.setForeground(new java.awt.Color(0, 102, 102));
        customerMgm3.setText("Activate");
        customerMgm3.setBorder(null);
        customerMgm3.setBorderPainted(false);
        customerMgm3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        customerMgm3.setFocusPainted(false);
        customerMgm3.setFocusable(false);

        deleteBtn1.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        deleteBtn1.setForeground(new java.awt.Color(153, 0, 0));
        deleteBtn1.setText("Delete");
        deleteBtn1.setBorder(null);
        deleteBtn1.setBorderPainted(false);
        deleteBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteBtn1.setFocusPainted(false);
        deleteBtn1.setFocusable(false);
        deleteBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customerMgm3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(customerMgm1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(registerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customerMgm2, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))))
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(registerBtn)
                .addGap(18, 18, 18)
                .addComponent(customerMgm3)
                .addGap(18, 18, 18)
                .addComponent(customerMgm1)
                .addGap(18, 18, 18)
                .addComponent(customerMgm2)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed
        // TODO add your handling code here:
        // Get the parent Admin frame
        java.awt.Window window = javax.swing.SwingUtilities.getWindowAncestor(this);

        if (window instanceof Admin) {
            Admin adminFrame = (Admin) window;

            // Dispose of the Admin frame
            adminFrame.dispose();

            // Show the StaffSignup frame
            StaffSignup staffSignupFrame = new StaffSignup();
            staffSignupFrame.setVisible(true);
            staffSignupFrame.pack();
            staffSignupFrame.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_registerBtnActionPerformed

    private void deleteBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtn1ActionPerformed
        // TODO add your handling code here:
        // Check if a row is selected
        int selectedRow = associateTable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select an associate to delete.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deletion
        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete the selected associate?",
                "Confirm Deletion",
                javax.swing.JOptionPane.YES_NO_OPTION
        );

        if (confirm != javax.swing.JOptionPane.YES_OPTION) {
            return;
        }

        // Get the AssociateId of the selected row
        DefaultTableModel model = (DefaultTableModel) associateTable.getModel();
        int associateId = (int) model.getValueAt(selectedRow, 0); // Assuming AssociateId is in column 0

        // Delete the associate from the database
        String deleteQuery = "DELETE FROM associate WHERE AssociateId = ?";
        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(deleteQuery)) {

            statement.setInt(1, associateId);
            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Associate deleted successfully.", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                // Remove the row from the table model
                model.removeRow(selectedRow);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to delete the associate.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while deleting the associate.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtn1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable associateTable;
    private javax.swing.JButton customerMgm1;
    private javax.swing.JButton customerMgm2;
    private javax.swing.JButton customerMgm3;
    private javax.swing.JButton deleteBtn1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton registerBtn;
    // End of variables declaration//GEN-END:variables
}
