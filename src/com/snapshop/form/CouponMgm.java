/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.snapshop.form;

import javax.swing.table.DefaultTableModel;
import com.snapshop.util.DatabaseConnection;
import java.awt.Window;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author lucas
 */
public class CouponMgm extends javax.swing.JPanel {

    /**
     * Creates new form CouponMgm
     */
    public CouponMgm() {
        initComponents();
        couponTable.getTableHeader().setFont(new java.awt.Font("Helvetica Neue", java.awt.Font.BOLD, 13));
        loadCouponData();
    }

    private void loadCouponData() {
        DefaultTableModel model = (DefaultTableModel) couponTable.getModel();
        model.setRowCount(0); // Clear existing rows

        String query = "SELECT couponId, couponCode, status, discountFraction, createdAt FROM coupon";

        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                int couponId = resultSet.getInt("couponId");
                String couponCode = resultSet.getString("couponCode");
                String status = resultSet.getString("status");
                double discountFraction = resultSet.getDouble("discountFraction");
                String createdAt = resultSet.getTimestamp("createdAt").toString();

                model.addRow(new Object[]{couponId, couponCode, status, discountFraction, createdAt});
            }

        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Failed to load coupon data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        couponTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        activateBtn = new javax.swing.JButton();
        DeactivateBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();

        couponTable.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        couponTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "code", "status", "fraction", "createdAt"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        couponTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        couponTable.setRowHeight(30);
        jScrollPane1.setViewportView(couponTable);
        if (couponTable.getColumnModel().getColumnCount() > 0) {
            couponTable.getColumnModel().getColumn(0).setMinWidth(30);
            couponTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            couponTable.getColumnModel().getColumn(0).setMaxWidth(30);
            couponTable.getColumnModel().getColumn(4).setMinWidth(200);
            couponTable.getColumnModel().getColumn(4).setPreferredWidth(200);
            couponTable.getColumnModel().getColumn(4).setMaxWidth(200);
        }

        jPanel1.setOpaque(false);

        addBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        addBtn.setForeground(new java.awt.Color(0, 102, 102));
        addBtn.setText("ADD");
        addBtn.setBorder(null);
        addBtn.setBorderPainted(false);
        addBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBtn.setFocusPainted(false);
        addBtn.setFocusable(false);
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        activateBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        activateBtn.setForeground(new java.awt.Color(0, 102, 102));
        activateBtn.setText("Activate");
        activateBtn.setBorder(null);
        activateBtn.setBorderPainted(false);
        activateBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        activateBtn.setFocusPainted(false);
        activateBtn.setFocusable(false);
        activateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateBtnActionPerformed(evt);
            }
        });

        DeactivateBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        DeactivateBtn.setForeground(new java.awt.Color(153, 0, 0));
        DeactivateBtn.setText("Deactivate");
        DeactivateBtn.setBorder(null);
        DeactivateBtn.setBorderPainted(false);
        DeactivateBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DeactivateBtn.setFocusPainted(false);
        DeactivateBtn.setFocusable(false);
        DeactivateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeactivateBtnActionPerformed(evt);
            }
        });

        delBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        delBtn.setForeground(new java.awt.Color(153, 0, 0));
        delBtn.setText("Delete");
        delBtn.setBorder(null);
        delBtn.setBorderPainted(false);
        delBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delBtn.setFocusPainted(false);
        delBtn.setFocusable(false);
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(delBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(activateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DeactivateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))))
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(addBtn)
                .addGap(18, 18, 18)
                .addComponent(activateBtn)
                .addGap(18, 18, 18)
                .addComponent(DeactivateBtn)
                .addGap(18, 18, 18)
                .addComponent(delBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        // Show the AddCouponDialog
        SwingUtilities.invokeLater(() -> {
            // Safely cast the parent to JFrame
            Window window = SwingUtilities.getWindowAncestor(this);
            if (window instanceof JFrame) {
                AddCouponDialog dialog = new AddCouponDialog((JFrame) window);
                dialog.setVisible(true);
                loadCouponData(); // Reload the table data after adding a new coupon
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Parent window is not a JFrame. Cannot open the dialog.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        });
    }//GEN-LAST:event_addBtnActionPerformed

    private void activateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateBtnActionPerformed
        // TODO add your handling code here:
        // Check if a row is selected
        int selectedRow = couponTable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a coupon to activate.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm activation
        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to activate the selected coupon?",
                "Confirm Activation",
                javax.swing.JOptionPane.YES_NO_OPTION
        );

        if (confirm != javax.swing.JOptionPane.YES_OPTION) {
            return;
        }

        // Get the couponId of the selected row
        DefaultTableModel model = (DefaultTableModel) couponTable.getModel();
        int couponId = (int) model.getValueAt(selectedRow, 0); // Assuming couponId is in column 0

        // Update the coupon's status to "active" in the database
        String updateQuery = "UPDATE coupon SET status = 'active' WHERE couponId = ?";
        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(updateQuery)) {
            statement.setInt(1, couponId);
            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Coupon activated successfully.", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                loadCouponData(); // Reload the table to reflect changes
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to activate the coupon.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while activating the coupon.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_activateBtnActionPerformed

    private void DeactivateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeactivateBtnActionPerformed
        // TODO add your handling code here:
        // Check if a row is selected
        int selectedRow = couponTable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a coupon to deactivate.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deactivation
        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to deactivate the selected coupon?",
                "Confirm Deactivation",
                javax.swing.JOptionPane.YES_NO_OPTION
        );

        if (confirm != javax.swing.JOptionPane.YES_OPTION) {
            return;
        }

        // Get the couponId of the selected row
        DefaultTableModel model = (DefaultTableModel) couponTable.getModel();
        int couponId = (int) model.getValueAt(selectedRow, 0); // Assuming couponId is in column 0

        // Update the coupon's status to "inactive" in the database
        String updateQuery = "UPDATE coupon SET status = 'inactive' WHERE couponId = ?";
        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(updateQuery)) {
            statement.setInt(1, couponId);
            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Coupon deactivated successfully.", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                loadCouponData(); // Reload the table to reflect changes
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to deactivate the coupon.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while deactivating the coupon.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeactivateBtnActionPerformed

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        // TODO add your handling code here:
        // Check if a row is selected
        int selectedRow = couponTable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a coupon to delete.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deletion
        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete the selected coupon? This action cannot be undone.",
                "Confirm Deletion",
                javax.swing.JOptionPane.YES_NO_OPTION
        );

        if (confirm != javax.swing.JOptionPane.YES_OPTION) {
            return;
        }

        // Get the couponId of the selected row
        DefaultTableModel model = (DefaultTableModel) couponTable.getModel();
        int couponId = (int) model.getValueAt(selectedRow, 0); // Assuming couponId is in column 0

        // Delete the coupon from the database
        String deleteQuery = "DELETE FROM coupon WHERE couponId = ?";
        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(deleteQuery)) {
            statement.setInt(1, couponId);
            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Coupon deleted successfully.", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                loadCouponData(); // Reload the table to reflect changes
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to delete the coupon.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while deleting the coupon.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_delBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeactivateBtn;
    private javax.swing.JButton activateBtn;
    private javax.swing.JButton addBtn;
    private javax.swing.JTable couponTable;
    private javax.swing.JButton delBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
