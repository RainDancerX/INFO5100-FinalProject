/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.snapshop.form;

import javax.swing.table.DefaultTableModel;
import com.snapshop.util.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import javax.swing.SwingUtilities;

/**
 *
 * @author lucas
 */
public class InventoryMgm extends javax.swing.JPanel {

    /**
     * Creates new form InventoryMgm
     */
    public InventoryMgm() {
        initComponents();

        inventoryTable.getTableHeader().setFont(new java.awt.Font("Helvetica Neue", java.awt.Font.BOLD, 13));
        // Load inventory data
        loadInventoryData();
    }

    private void loadInventoryData() {
        DefaultTableModel model = (DefaultTableModel) inventoryTable.getModel();
        model.setRowCount(0); // Clear existing rows

        String query = "SELECT itemId, itemName, category, gender, price, brand, inventory FROM item";

        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                DecimalFormat df = new DecimalFormat("$#,##0.00");
                int itemId = resultSet.getInt("itemId");
                String itemName = resultSet.getString("itemName");
                String category = resultSet.getString("category");
                String gender = resultSet.getString("gender");
                String price = df.format(resultSet.getDouble("price"));
                String brand = resultSet.getString("brand");
                int inventory = resultSet.getInt("inventory");

                model.addRow(new Object[]{itemId, itemName, category, gender, price, brand, inventory});
            }

        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Failed to load inventory data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        addInventoryBtn = new javax.swing.JButton();
        updateItemBtn = new javax.swing.JButton();
        deductInventoryBtn = new javax.swing.JButton();
        removeItemBtn = new javax.swing.JButton();

        inventoryTable.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "itemId", "itemName", "category", "gender", "price", "brand", "inventory"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventoryTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inventoryTable.setRowHeight(30);
        jScrollPane1.setViewportView(inventoryTable);
        if (inventoryTable.getColumnModel().getColumnCount() > 0) {
            inventoryTable.getColumnModel().getColumn(0).setMinWidth(45);
            inventoryTable.getColumnModel().getColumn(0).setPreferredWidth(45);
            inventoryTable.getColumnModel().getColumn(0).setMaxWidth(45);
            inventoryTable.getColumnModel().getColumn(1).setMinWidth(200);
            inventoryTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        jPanel1.setOpaque(false);

        addInventoryBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        addInventoryBtn.setForeground(new java.awt.Color(0, 102, 102));
        addInventoryBtn.setText("ADD");
        addInventoryBtn.setBorder(null);
        addInventoryBtn.setBorderPainted(false);
        addInventoryBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addInventoryBtn.setFocusPainted(false);
        addInventoryBtn.setFocusable(false);
        addInventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInventoryBtnActionPerformed(evt);
            }
        });

        updateItemBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        updateItemBtn.setForeground(new java.awt.Color(0, 102, 102));
        updateItemBtn.setText("Update");
        updateItemBtn.setBorder(null);
        updateItemBtn.setBorderPainted(false);
        updateItemBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateItemBtn.setFocusPainted(false);
        updateItemBtn.setFocusable(false);
        updateItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateItemBtnActionPerformed(evt);
            }
        });

        deductInventoryBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        deductInventoryBtn.setForeground(new java.awt.Color(153, 0, 0));
        deductInventoryBtn.setText("Deduct");
        deductInventoryBtn.setBorder(null);
        deductInventoryBtn.setBorderPainted(false);
        deductInventoryBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deductInventoryBtn.setFocusPainted(false);
        deductInventoryBtn.setFocusable(false);
        deductInventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deductInventoryBtnActionPerformed(evt);
            }
        });

        removeItemBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        removeItemBtn.setForeground(new java.awt.Color(153, 0, 0));
        removeItemBtn.setText("Remove");
        removeItemBtn.setBorder(null);
        removeItemBtn.setBorderPainted(false);
        removeItemBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeItemBtn.setFocusPainted(false);
        removeItemBtn.setFocusable(false);
        removeItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(removeItemBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deductInventoryBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(addInventoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(updateItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(addInventoryBtn)
                .addGap(18, 18, 18)
                .addComponent(updateItemBtn)
                .addGap(18, 18, 18)
                .addComponent(deductInventoryBtn)
                .addGap(18, 18, 18)
                .addComponent(removeItemBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addInventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInventoryBtnActionPerformed
        // TODO add your handling code here:
        // Check if a row is selected
        int selectedRow = inventoryTable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select an item to add inventory.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get item details from the selected row
        DefaultTableModel model = (DefaultTableModel) inventoryTable.getModel();
        int itemId = (int) model.getValueAt(selectedRow, 0); // Assuming itemId is in column 0
        String itemName = (String) model.getValueAt(selectedRow, 1); // Assuming itemName is in column 1

        // Prompt the user for the quantity to add
        String input = javax.swing.JOptionPane.showInputDialog(
                this,
                "Enter the quantity to add for \"" + itemName + "\":",
                "Add Inventory",
                javax.swing.JOptionPane.PLAIN_MESSAGE
        );

        // Validate input
        if (input == null || input.trim().isEmpty()) {
            return; // User canceled or entered nothing
        }

        int quantityToAdd;
        try {
            quantityToAdd = Integer.parseInt(input.trim());
            if (quantityToAdd <= 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Please enter a positive quantity.", "Invalid Input", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid integer.", "Invalid Input", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Update the database
        String updateQuery = "UPDATE item SET inventory = inventory + ? WHERE itemId = ?";
        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(updateQuery)) {

            statement.setInt(1, quantityToAdd);
            statement.setInt(2, itemId);

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Inventory updated successfully!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                // Reload inventory data to reflect changes
                loadInventoryData();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to update inventory. Please try again.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while updating inventory.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addInventoryBtnActionPerformed

    private void deductInventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deductInventoryBtnActionPerformed
        // TODO add your handling code here:
        // Check if a row is selected
        int selectedRow = inventoryTable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select an item to deduct inventory.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get item details from the selected row
        DefaultTableModel model = (DefaultTableModel) inventoryTable.getModel();
        int itemId = (int) model.getValueAt(selectedRow, 0); // Assuming itemId is in column 0
        String itemName = (String) model.getValueAt(selectedRow, 1); // Assuming itemName is in column 1
        int currentInventory = (int) model.getValueAt(selectedRow, 6); // Assuming inventory is in column 6

        // Prompt the user for the quantity to deduct
        String input = javax.swing.JOptionPane.showInputDialog(
                this,
                "Enter the quantity to deduct for \"" + itemName + "\" (Current Inventory: " + currentInventory + "):",
                "Deduct Inventory",
                javax.swing.JOptionPane.PLAIN_MESSAGE
        );

        // Validate input
        if (input == null || input.trim().isEmpty()) {
            return; // User canceled or entered nothing
        }

        int quantityToDeduct;
        try {
            quantityToDeduct = Integer.parseInt(input.trim());
            if (quantityToDeduct <= 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Please enter a positive quantity.", "Invalid Input", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid integer.", "Invalid Input", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if deduction would result in negative inventory
        if (quantityToDeduct > currentInventory) {
            javax.swing.JOptionPane.showMessageDialog(this, "Insufficient inventory. Cannot deduct more than the current inventory.", "Invalid Deduction", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Update the database
        String updateQuery = "UPDATE item SET inventory = inventory - ? WHERE itemId = ?";
        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(updateQuery)) {

            statement.setInt(1, quantityToDeduct);
            statement.setInt(2, itemId);

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Inventory deducted successfully!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                // Reload inventory data to reflect changes
                loadInventoryData();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to update inventory. Please try again.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while updating inventory.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deductInventoryBtnActionPerformed

    private void removeItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemBtnActionPerformed
        // TODO add your handling code here:
        // Check if a row is selected
        int selectedRow = inventoryTable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select an item to remove.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get item details from the selected row
        DefaultTableModel model = (DefaultTableModel) inventoryTable.getModel();
        int itemId = (int) model.getValueAt(selectedRow, 0); // Assuming itemId is in column 0
        String itemName = (String) model.getValueAt(selectedRow, 1); // Assuming itemName is in column 1

        // Confirm deletion
        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to remove the item \"" + itemName + "\"?",
                "Confirm Removal",
                javax.swing.JOptionPane.YES_NO_OPTION
        );

        if (confirm != javax.swing.JOptionPane.YES_OPTION) {
            return; // User canceled the operation
        }

        // Delete the item from the database
        String deleteQuery = "DELETE FROM item WHERE itemId = ?";
        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(deleteQuery)) {

            statement.setInt(1, itemId);

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Item removed successfully!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                // Reload inventory data to reflect changes
                loadInventoryData();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to remove the item. Please try again.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while removing the item.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeItemBtnActionPerformed

    private void updateItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateItemBtnActionPerformed
        // TODO add your handling code here:
        // Check if a row is selected
        int selectedRow = inventoryTable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select an item to update.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get item details from the selected row
        DefaultTableModel model = (DefaultTableModel) inventoryTable.getModel();
        int itemId = (int) model.getValueAt(selectedRow, 0); // Assuming itemId is in column 0
        String itemName = (String) model.getValueAt(selectedRow, 1);
        String category = (String) model.getValueAt(selectedRow, 2);
        String gender = (String) model.getValueAt(selectedRow, 3);
        double price = Double.parseDouble(model.getValueAt(selectedRow, 4).toString().replace("$", "").replace(",", ""));
        String brand = (String) model.getValueAt(selectedRow, 5);
        int inventory = (int) model.getValueAt(selectedRow, 6);

        // Retrieve the parent JFrame
        java.awt.Window parentWindow = SwingUtilities.getWindowAncestor(this);
        if (parentWindow instanceof javax.swing.JFrame) {
            javax.swing.JFrame parentFrame = (javax.swing.JFrame) parentWindow;

            // Open the update item dialog
            UpdateItemDialog updateDialog = new UpdateItemDialog(parentFrame, itemId, itemName, category, gender, price, brand, inventory);
            updateDialog.setVisible(true);

            // Refresh inventory table after updating
            if (updateDialog.isUpdated()) {
                loadInventoryData();
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Unable to determine parent frame.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateItemBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addInventoryBtn;
    private javax.swing.JButton deductInventoryBtn;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeItemBtn;
    private javax.swing.JButton updateItemBtn;
    // End of variables declaration//GEN-END:variables
}
